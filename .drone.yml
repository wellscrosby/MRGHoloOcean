kind: pipeline
type: docker
name: default

steps:
- name: Build Editor
  image: adamrehn/ue4-full:4.27.2
  commands:
  - cd engine
  - bash Build/ContinuousIntegration/build_project.sh # check if this script needs any updating
  - echo "The commit builds"

- name: Package Project
  image: adamrehn/ue4-full:4.27.2
  # environment:
  #   USER:
  #     from_secret: worlds_username
  #   PASSWORD: 
  #     from_secret: worlds_password
  commands:
  # # git thinks our gitea's SSL certs are suspicious
  # - git config --global http.sslverify "false"
  # - git clone --depth=1 https://$USER:$PASSWORD@robots.et.byu.edu/gitea/contagon/HoloOcean-Worlds our_worlds
  - cd engine
  - bash Build/ContinuousIntegration/package_ue4_project.sh ${DRONE_COMMIT:0:8} # Has this bash script been updated? And should I be doing it based off of the commit?
  - echo "The pull request was successfully packaged"

# Pushes build to minio, after which the python, or client, side can pull the binaries from there
- name: Push to S3
  image: plugins/s3
  settings:
      bucket: holo
      access_key: 
        from_secret: minio_username
      secret_key: 
        from_secret: minio_password
      source: engine/final/*
      strip_prefix: engine/final/
      target: /TestWorlds/${DRONE_BRANCH}
      path_style: true
      endpoint: http://minio:9000/  

- name: Push Tagged S3
  image: plugins/s3
  settings:
      bucket: holo
      access_key: 
        from_secret: minio_username
      secret_key: 
        from_secret: minio_password
      source: engine/tag/*
      strip_prefix: engine/tag/
      target: /TestWorlds/${DRONE_TAG}
      path_style: true
      endpoint: http://minio:9000/  
  when:
    event:
      - tag 

# ---
# kind: pipeline
# type: docker
# name: test

# steps:
- name: build_docker
  image: docker:latest
  volumes:
  - name: docker_sock
    path: /var/run/docker.sock
  commands:
  - cd client
  - docker build -t "${DRONE_REPO}:${DRONE_COMMIT:0:8}" .

- name: install_package
  image: "${DRONE_REPO}:${DRONE_COMMIT:0:8}"
  environment:
    HOLODECKPATH: packages
  commands:
  # # Find what branch we need to pull from
  # - BRANCH_EXISTS=$(git ls-remote --heads https://bitbucket.org/frostlab/HoloOcean-Engine.git ${DRONE_BRANCH} | wc -l)
  # - if test "$BRANCH_EXISTS" = "1"; then BRANCH=${DRONE_BRANCH}; else BRANCH=develop; fi
  # - echo $BRANCH
  # Install package
  - cd client
  - pip3 install .
  - python3 -c "import holoocean; holoocean.install(\"TestWorlds\", branch=\"${DRONE_BRANCH}\", commit=\"${DRONE_COMMIT:0:8}\")"

# iterate through all python versions

- name: py36
  image: "${DRONE_REPO}:${DRONE_COMMIT:0:8}"
  commands:
  - cd client
  - tox -e py36

- name: py37
  image: "${DRONE_REPO}:${DRONE_COMMIT:0:8}"
  commands:
  - cd client
  - tox -e py37

- name: py38
  image: "${DRONE_REPO}:${DRONE_COMMIT:0:8}"
  commands:
  - cd client
  - tox -e py38

- name: py39
  image: "${DRONE_REPO}:${DRONE_COMMIT:0:8}"
  commands:
  - cd client
  - tox -e py39

- name: py310
  image: "${DRONE_REPO}:${DRONE_COMMIT:0:8}"
  commands:
  - cd client
  - tox -e py310

volumes:
- name: docker_sock
  host:
    path: /var/run/docker.sock

---
kind: pipeline
type: docker
name: publish

steps:
- name: pypi_publish
  image: plugins/pypi
  settings:
    username:
      from_secret: pypi_username
    password:
      from_secret: pypi_password
    ## The following line is for when you want to test changes without uploading to the actual PyPi database
    # repository: https://test.pypi.org/simple/
    setupfile: client/setup.py

# Image that does not contain any of the world packages
- name: docker_base_publish
  image: plugins/docker
  settings:
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: frostlab/holoocean
    dockerfile: client/docker/Dockerfile
    tags:
      - base-${DRONE_TAG}
      - base

# Image that contains only the Ocean world package
- name: docker_ocean_publish
  image: plugins/docker
  settings:
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: frostlab/holoocean
    dockerfile: client/docker/Dockerfile_ocean
    tags:
      - ocean-${DRONE_TAG}
      - ocean

# Image that contains all available packages
- name: docker_latest_publish
  image: plugins/docker
  settings:
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: frostlab/holoocean
    dockerfile: client/docker/Dockerfile_latest
    tags:
      - all-${DRONE_TAG}
      - all
      - latest
      
trigger:
  event:
    - tag 