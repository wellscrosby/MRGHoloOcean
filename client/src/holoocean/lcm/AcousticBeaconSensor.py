"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class AcousticBeaconSensor(object):
    __slots__ = ["timestamp", "msg_type", "from_beacon", "azimuth", "elevation", "range", "z"]

    __typenames__ = ["int64_t", "string", "int32_t", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.timestamp = 0
        self.msg_type = ""
        self.from_beacon = 0
        self.azimuth = 0.0
        self.elevation = 0.0
        self.range = 0.0
        self.z = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(AcousticBeaconSensor._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        __msg_type_encoded = self.msg_type.encode('utf-8')
        buf.write(struct.pack('>I', len(__msg_type_encoded)+1))
        buf.write(__msg_type_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">iffff", self.from_beacon, self.azimuth, self.elevation, self.range, self.z))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != AcousticBeaconSensor._get_packed_fingerprint():
            raise ValueError("Decode error")
        return AcousticBeaconSensor._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = AcousticBeaconSensor()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        __msg_type_len = struct.unpack('>I', buf.read(4))[0]
        self.msg_type = buf.read(__msg_type_len)[:-1].decode('utf-8', 'replace')
        self.from_beacon, self.azimuth, self.elevation, self.range, self.z = struct.unpack(">iffff", buf.read(20))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if AcousticBeaconSensor in parents: return 0
        tmphash = (0xe7c2b98e4d73047a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if AcousticBeaconSensor._packed_fingerprint is None:
            AcousticBeaconSensor._packed_fingerprint = struct.pack(">Q", AcousticBeaconSensor._get_hash_recursive([]))
        return AcousticBeaconSensor._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", AcousticBeaconSensor._get_packed_fingerprint())[0]

