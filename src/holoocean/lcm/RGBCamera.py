"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class RGBCamera(object):
    __slots__ = ["timestamp", "width", "height", "channels", "image"]

    __typenames__ = ["int64_t", "int32_t", "int32_t", "int32_t", "int16_t"]

    __dimensions__ = [None, None, None, None, ["height", "width", "channels"]]

    def __init__(self):
        self.timestamp = 0
        self.width = 0
        self.height = 0
        self.channels = 0
        self.image = []

    def encode(self):
        buf = BytesIO()
        buf.write(RGBCamera._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qiii", self.timestamp, self.width, self.height, self.channels))
        for i0 in range(self.height):
            for i1 in range(self.width):
                buf.write(struct.pack('>%dh' % self.channels, *self.image[i0][i1][:self.channels]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != RGBCamera._get_packed_fingerprint():
            raise ValueError("Decode error")
        return RGBCamera._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = RGBCamera()
        self.timestamp, self.width, self.height, self.channels = struct.unpack(">qiii", buf.read(20))
        self.image = []
        for i0 in range(self.height):
            self.image.append([])
            for i1 in range(self.width):
                self.image[i0].append(struct.unpack('>%dh' % self.channels, buf.read(self.channels * 2)))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if RGBCamera in parents: return 0
        tmphash = (0x12773a907ecce8a3) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if RGBCamera._packed_fingerprint is None:
            RGBCamera._packed_fingerprint = struct.pack(">Q", RGBCamera._get_hash_recursive([]))
        return RGBCamera._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", RGBCamera._get_packed_fingerprint())[0]

