"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class SonarSensor(object):
    __slots__ = ["timestamp", "bins_azimuth", "bins_range", "image"]

    __typenames__ = ["int64_t", "int32_t", "int32_t", "float"]

    __dimensions__ = [None, None, None, ["bins_range", "bins_azimuth"]]

    def __init__(self):
        self.timestamp = 0
        self.bins_azimuth = 0
        self.bins_range = 0
        self.image = []

    def encode(self):
        buf = BytesIO()
        buf.write(SonarSensor._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qii", self.timestamp, self.bins_azimuth, self.bins_range))
        for i0 in range(self.bins_range):
            buf.write(struct.pack('>%df' % self.bins_azimuth, *self.image[i0][:self.bins_azimuth]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != SonarSensor._get_packed_fingerprint():
            raise ValueError("Decode error")
        return SonarSensor._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = SonarSensor()
        self.timestamp, self.bins_azimuth, self.bins_range = struct.unpack(">qii", buf.read(16))
        self.image = []
        for i0 in range(self.bins_range):
            self.image.append(struct.unpack('>%df' % self.bins_azimuth, buf.read(self.bins_azimuth * 4)))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if SonarSensor in parents: return 0
        tmphash = (0x3c5e617d2bbe6ae8) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if SonarSensor._packed_fingerprint is None:
            SonarSensor._packed_fingerprint = struct.pack(">Q", SonarSensor._get_hash_recursive([]))
        return SonarSensor._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", SonarSensor._get_packed_fingerprint())[0]

